import nltk
import textstat
from lexicalrichness import LexicalRichness
import os

nltk.download('punkt')

class LexicalAnalyzer:
    def __init__(self, text):
        self.text = text
        self.lex = LexicalRichness(text)

    def perform_lexical_analysis(self):
        report = f"""
        üß† –õ–ï–ö–°–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:
        –û–±—â–µ–µ —á–∏—Å–ª–æ —Å–ª–æ–≤: {self.lex.words}
        –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤ (types): {self.lex.terms}
        Type-Token Ratio (TTR): {self.lex.ttr:.2f}
        MTLD: {self.lex.mtld():.2f}
        HD-D: {self.lex.hdd():.2f}

        üìö –ß–ò–¢–ê–ï–ú–û–°–¢–¨:
        Flesch-Kincaid Grade Level: {textstat.flesch_kincaid_grade(self.text):.2f}
        Flesch Reading Ease Score: {textstat.flesch_reading_ease(self.text):.2f}
        –î–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ —Å—Ä–µ–¥–Ω–µ–º: {textstat.avg_sentence_length(self.text):.2f} —Å–ª–æ–≤
        –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {textstat.avg_letter_per_word(self.text):.2f} –±—É–∫–≤
        """
        return report

    def save_report(self, results_folder, channel_name_clean):
        report = self.perform_lexical_analysis()
        lexical_report_path = os.path.join(results_folder, f"{channel_name_clean}_lexical_report.txt")
        with open(lexical_report_path, 'w', encoding='utf-8') as out:
            out.write(report)
        return lexical_report_path

if __name__ == '__main__':
    text = "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å."
    channel_name_clean = "example_channel"
    results_folder = os.path.join('results', channel_name_clean)
    os.makedirs(results_folder, exist_ok=True)

    analyzer = LexicalAnalyzer(text)
    result_path = analyzer.save_report(results_folder, channel_name_clean)
    print(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {result_path}")
